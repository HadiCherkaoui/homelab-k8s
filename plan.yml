spec:
  inputs:
    # Job and Stage name
    as:
      default: 'plan'
      description: 'Defines the name of this job.'
    stage:
      default: 'build'
      description: 'Defines the stage that this job will belong to.'

    # Versions
    # This version is only required, because we cannot access the context of the component,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/438275
    version:
      default: '2.6.1'
      description: 'Version of this component. Has to be the same as the one in the component include entry.'

    base_os:
      default: 'alpine'
      options:
        - 'alpine'
        - 'debian'
        - '$GITLAB_OPENTOFU_BASE_IMAGE_OS'
      description: 'Base OS of GitLab OpenTofu image.'

    opentofu_version:
      default: '1.9.1'
      options:
        - '1.9.1'
        - '1.9.0'
        - '1.8.9'
        - '1.8.8'
        - '1.7.8'
        - '1.7.7'
        - '1.6.3'
        - '$OPENTOFU_VERSION'
      description: 'OpenTofu version that should be used.'

    # Images
    image_registry_base:
      default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu'
      description: 'Host URI to the job images. Will be combined with `image_name` to construct the actual image URI.'
    # FIXME: not yet possible because of https://gitlab.com/gitlab-org/gitlab/-/issues/438722
    # gitlab_opentofu_image:
    #   # FIXME: This should reference the component tag that is used.
    #   #        Currently, blocked by https://gitlab.com/gitlab-org/gitlab/-/issues/438275
    #   # default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:$[[ inputs.opentofu_version ]]'
    #   default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:$[[ inputs.version ]]-opentofu$[[ inputs.opentofu_version ]]'
    #   description: 'Tag of the gitlab-opentofu image.'

    image_name:
      default: 'gitlab-opentofu'
      description: 'Image name for the job images. Hosted under `image_registry_base`.'

    image_digest:
      default: ''
      # FIXME: we cannot use regex yet because of a bug that rejects
      # empty strings from ever being checked against the regex.
      # see https://gitlab.com/gitlab-org/gitlab/-/issues/477707
      # regex: '^(@sha256:[a-z0-9]{64})?$'
      description: 'Image digest of the image you want to use. The format must be `@<image_digest>`, e.g. `@sha256:abc..`, see regex of this input. Please consult the release page at https://gitlab.com/components/opentofu/-/releases to obtain the image digests.'

    # Configuration
    root_dir:
      default: ${CI_PROJECT_DIR}
      description: 'Root directory for the OpenTofu project.'
    state_name:
      default: default
      description: 'Remote OpenTofu state name.'
    plan_name:
      default: 'plan'
      description: 'The name of the plan cache and plan json file.'
    destroy:
      default: false
      type: boolean
      description: 'Indicate if the plan should be a destroy plan. You may want to change the `plan_name` input to `destroy-plan` which is the default for the destroy job.'
    artifacts_access:
      default: 'none'
      description: 'Access level for the plan artifact. See https://docs.gitlab.com/ee/ci/yaml/#artifactsaccess for possible values.'
    extra_artifacts:
      default: []
      type: array
      description: 'Extra artifacts to upload from the plan'
    var_file:
      default: ''
      type: string
      description: 'Path to a variables files relative to root_dir.'
    rules:
      # FIXME: eventually, we'll want to define `null` as the default,
      # but this is NOT support yet, see
      # https://gitlab.com/gitlab-org/gitlab/-/issues/440468
      default: [{when: on_success}]
      type: array
      description: 'Defines the `rules` of the job.'
    cache_policy:
      default: pull-push
      type: string
      description: 'Defines the cache policy of the job.'
    warning_on_non_empty_plan:
      default: false
      type: boolean
      description: 'Whether to mark the job with a warning if the plan contains a diff.'
    auto_encryption:
      default: false
      type: boolean
      description: 'Whether to enable automatic state and plan encryption.'
    auto_encryption_passphrase:
      default: ''
      type: string
      description: 'Defines the passphrase to auto encrypt the state and plan. Only used if `auto_encryption` is `true`.'
    auto_encryption_enable_migration_from_unencrypted:
      default: false
      type: boolean
      description: 'Whether to setup automatic state and plan encryption for currently unencrypted state. This is only temporarily useful when migrating from an unencrypted state.'
    allow_developer_role:
      default: false
      type: boolean
      description: 'Users with the Developer role are not able to lock the state. Thus a regular `tofu plan` fails. When set to `true` a `-lock=false` is passed to plan.'
    auto_define_backend:
      default: false
      type: boolean
      description: 'Whether to automatically define the HTTP backend configuration block.'
    enable_id_tokens:
      default: false
      type: boolean
      description: |
       Whether to enable `id_tokens` support for the job.
       This works by extending a hidden base job configuration with the `id_tokens` field.
       The job should only contain the `id_tokens` field, the rest may be overridden.
       The job name can be configured with `id_tokens_base_job_name` if necessary.
       If the script given in `id_tokens_setup_script` exists, it will be sourced so that setup actions can be performed,
       like assuming an IAM role of your cloud provider.
    id_tokens_base_job_name:
      default: '.gitlab-tofu:id_tokens'
      type: string
      description: 'Name of the hidden base job containing the `id_tokens` configuration to extend this job from. Make sure to only configure `id_tokens`, everything else might be overridden.'
    id_tokens_setup_script:
      default: '.gitlab/ci/setup-id-tokens.sh'
      type: string
      description: 'Path to a shell script that is sourced when `enable_id_tokens` is `true`.'
    post_mr_plan_comment:
      default: false
      type: boolean
      description: 'Whether to post a comment in the Merge Request with the produced plan.'

---

include:
  # NOTE: see the note in that template file for what he heck is going on here.
  - local: '/templates/__internal_id_tokens_base_job.yml'
    rules:
      - if: '"$[[ inputs.enable_id_tokens ]]" == "true"'
    inputs:
      as: $[[ inputs.as ]]
      id_tokens_base_job_name: $[[ inputs.id_tokens_base_job_name ]]
      id_tokens_setup_script: $[[ inputs.id_tokens_setup_script ]]

# NOTE: the two following jobs are necessary to implement the abstraction logic
# required for the `warning_on_non_empty_plan` input.
# Without any kind of flow control support for the GitLab CI YAML we cannot infer
# another value from the input. However, we can clearly apply "inheritance" to
# customize behavior related to the CI keywords that have otherwise nothing
# in common with the inputs value.
'.$[[ inputs.as ]]:detailed_exitcode:warning:false':
  extends: null

'.$[[ inputs.as ]]:detailed_exitcode:warning:true':
  variables:
    GITLAB_TOFU_USE_DETAILED_EXITCODE: '$[[ inputs.warning_on_non_empty_plan ]]'
    # NOTE: we rely on correct exitcode reporting behavior for the `warning_on_non_empty_plan` input
    # behavior. However, when using bash the runner does not work properly without setting
    # the feature flag below to `true`.
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
  allow_failure:
    # NOTE: tofu plan -detailed-exitcode return 2 as exit code
    # when the plan is non-empty.
    exit_codes: [2]
  artifacts:
    # NOTE: we require to always upload artifacts, because when `warning_on_non_empty_plan` is set enabled
    # and there is a non-empty plan we have an exit code of `2` which is considered a (failure),
    # but we still want to upload all the artifacts.
    when: always

# NOTE: due to the lacking support of providing map nodes as input values
# we need to hack support for id_tokens together. It's even worse that id_tokens
# do NOT have a consistent type - or rather it's child nodes - for example, the `aud`
# can be a literal string value, a variable or an array. Limitations, bear with me.
# See https://gitlab.com/gitlab-org/gitlab/-/issues/452451
'.$[[ inputs.as ]]:id_tokens-setup:false':
  extends: null

'$[[ inputs.as ]]':
  extends:
    # NOTE: see the comment above. This is to support the `warning_on_non_empty_plan` input.
    - '.$[[ inputs.as ]]:detailed_exitcode:warning:$[[ inputs.warning_on_non_empty_plan ]]'
    # NOTE: see the comment above. This is to support the `id_tokens` setup.
    - '.$[[ inputs.as ]]:id_tokens-setup:$[[ inputs.enable_id_tokens ]]'
  stage: $[[ inputs.stage ]]
  environment:
    name: $[[ inputs.state_name ]]
    action: prepare
  resource_group: $GITLAB_TOFU_STATE_NAME
  artifacts:
    # Terraform's cache files can include secrets which can be accidentally exposed.
    # Please exercise caution when utilizing secrets in your Terraform infrastructure and
    # consider limiting access to artifacts or take other security measures to protect sensitive information.
    # See https://docs.gitlab.com/ee/ci/yaml/#artifactsaccess for possible values.
    access: '$[[ inputs.artifacts_access ]]'
    paths:
      - $GITLAB_TOFU_ROOT_DIR/$[[ inputs.plan_name ]].cache
      - '$[[ inputs.extra_artifacts ]]'
    reports:
      terraform: $GITLAB_TOFU_ROOT_DIR/$[[ inputs.plan_name]].json
  rules: $[[ inputs.rules ]]
  cache:
    key: "$__CACHE_KEY_HACK"
    policy: $[[ inputs.cache_policy ]]
    paths:
      - $GITLAB_TOFU_ROOT_DIR/.terraform/
  variables:
    # FIXME: work around to make slashes work in `cache:key`. see https://gitlab.com/gitlab-org/gitlab/-/issues/439898
    __CACHE_KEY_HACK: "$[[ inputs.root_dir ]]"
    GITLAB_TOFU_ROOT_DIR: $[[ inputs.root_dir ]]
    GITLAB_TOFU_STATE_NAME: $[[ inputs.state_name ]]
    GITLAB_TOFU_PLAN_NAME: $[[ inputs.plan_name ]]
    GITLAB_TOFU_PLAN_WITH_JSON: true
    GITLAB_TOFU_VAR_FILE: '$[[ inputs.var_file ]]'
    GITLAB_TOFU_AUTO_ENCRYPTION: '$[[ inputs.auto_encryption ]]'
    GITLAB_TOFU_AUTO_ENCRYPTION_PASSPHRASE: '$[[ inputs.auto_encryption_passphrase ]]'
    GITLAB_TOFU_AUTO_ENCRYPTION_ENABLE_MIGRATION_FROM_UNENCRYPTED: '$[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]'
    GITLAB_TOFU_ALLOW_DEVELOPER_ROLE: '$[[ inputs.allow_developer_role ]]'
    GITLAB_TOFU_AUTO_DEFINE_BACKEND: '$[[ inputs.auto_define_backend ]]'
  image:
    name: '$[[ inputs.image_registry_base ]]/$[[ inputs.image_name ]]:$[[ inputs.version ]]-opentofu$[[ inputs.opentofu_version ]]-$[[ inputs.base_os ]]$[[ inputs.image_digest ]]'
  script:
    - |
      args=""
      if [ "$[[ inputs.destroy ]]" == "true" ]; then
        echo "Planning for a destroy"
        args="-destroy"
      fi
    - gitlab-tofu plan $args
    - |
      if [ "$[[ inputs.post_mr_plan_comment ]]" == "true" ]; then
        if [ "${CI_PIPELINE_SOURCE}" == "merge_request_event" ]; then
          plan="$(gitlab-tofu show -no-color "$[[ inputs.plan_name ]].cache")"
          additions="$(jq -r '.create' < "${GITLAB_TOFU_ROOT_DIR}/$[[ inputs.plan_name ]].json")"
          changes="$(jq -r '.update' < "${GITLAB_TOFU_ROOT_DIR}/$[[ inputs.plan_name ]].json")"
          deletions="$(jq -r '.delete' < "${GITLAB_TOFU_ROOT_DIR}/$[[ inputs.plan_name ]].json")"
          cat << EOF | gitlab-tofu-ctl mr-commenter "${CI_PROJECT_ID}" "${CI_MERGE_REQUEST_IID}" "plan"
      ## OpenTofu Plan

      Generated plan with **${additions}** additions, **${changes}** changes and **${deletions}** deletions.

      <details><summary>Click to expand full plan</summary>

      \`\`\`hcl
      ${plan}
      \`\`\`

      </details>

      *Produced by job [#${CI_JOB_ID}](${CI_JOB_URL}).*
      EOF
        else
          echo "The post_mr_plan_comment input is true, but the plan job is not running in a merge request pipeline. Skipping to post comment ..."
        fi
      fi
