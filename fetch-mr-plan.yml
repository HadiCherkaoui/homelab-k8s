spec:
  inputs:
    # Job and Stage name
    as:
      default: 'fetch-mr-plan'
      description: 'Defines the name of this job.'
    stage:
      default: 'build'
      description: 'Defines the stage that this job will belong to.'

    # Versions
    # This version is only required, because we cannot access the context of the component,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/438275
    version:
      default: '2.6.1'
      description: 'Version of this component. Has to be the same as the one in the component include entry.'

    base_os:
      default: 'alpine'
      options:
        - 'alpine'
        - 'debian'
        - '$GITLAB_OPENTOFU_BASE_IMAGE_OS'
      description: 'Base OS of GitLab OpenTofu image.'

    opentofu_version:
      default: '1.9.1'
      options:
        - '1.9.1'
        - '1.9.0'
        - '1.8.9'
        - '1.8.8'
        - '1.7.8'
        - '1.7.7'
        - '1.6.3'
        - '$OPENTOFU_VERSION'
      description: 'OpenTofu version that should be used.'

    # Images
    image_registry_base:
      default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu'
      description: 'Host URI to the job images. Will be combined with `image_name` to construct the actual image URI.'
    # FIXME: not yet possible because of https://gitlab.com/gitlab-org/gitlab/-/issues/438722
    # gitlab_opentofu_image:
    #   # FIXME: This should reference the component tag that is used.
    #   #        Currently, blocked by https://gitlab.com/gitlab-org/gitlab/-/issues/438275
    #   # default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:$[[ inputs.opentofu_version ]]'
    #   default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:$[[ inputs.version ]]-opentofu$[[ inputs.opentofu_version ]]'
    #   description: 'Tag of the gitlab-opentofu image.'

    image_name:
      default: 'gitlab-opentofu'
      description: 'Image name for the job images. Hosted under `image_registry_base`.'

    image_digest:
      default: ''
      # FIXME: we cannot use regex yet because of a bug that rejects
      # empty strings from ever being checked against the regex.
      # see https://gitlab.com/gitlab-org/gitlab/-/issues/477707
      # regex: '^(@sha256:[a-z0-9]{64})?$'
      description: 'Image digest of the image you want to use. The format must be `@<image_digest>`, e.g. `@sha256:abc..`, see regex of this input. Please consult the release page at https://gitlab.com/components/opentofu/-/releases to obtain the image digests.'

    # Configuration
    root_dir:
      default: ${CI_PROJECT_DIR}
      description: 'Root directory for the OpenTofu project.'
    state_name:
      default: default
      description: 'Remote OpenTofu state name.'
    plan_name:
      default: 'plan'
      description: 'The name of the plan cache and plan json file.'
    artifacts_access:
      default: 'none'
      description: 'Access level for the plan artifact. See https://docs.gitlab.com/ee/ci/yaml/#artifactsaccess for possible values.'
    extra_artifacts:
      default: []
      type: array
      description: 'Extra artifacts to upload from the plan'
    var_file:
      default: ''
      type: string
      description: 'Path to a variables files relative to root_dir.'
    rules:
      # FIXME: eventually, we'll want to define `null` as the default,
      # but this is NOT support yet, see
      # https://gitlab.com/gitlab-org/gitlab/-/issues/440468
      default: [{when: on_success}]
      type: array
      description: 'Defines the `rules` of the job.'
    auto_encryption:
      default: false
      type: boolean
      description: 'Whether to enable automatic state and plan encryption.'
    auto_encryption_passphrase:
      default: ''
      type: string
      description: 'Defines the passphrase to auto encrypt the state and plan. Only used if `auto_encryption` is `true`.'
    auto_encryption_enable_migration_from_unencrypted:
      default: false
      type: boolean
      description: 'Whether to setup automatic state and plan encryption for currently unencrypted state. This is only temporarily useful when migrating from an unencrypted state.'
    allow_developer_role:
      default: false
      type: boolean
      description: 'Users with the Developer role are not able to lock the state. Thus a regular `tofu plan` fails. When set to `true` a `-lock=false` is passed to plan.'
    auto_define_backend:
      default: false
      type: boolean
      description: 'Whether to automatically define the HTTP backend configuration block.'
    drift_detection_mode:
      default: refresh-only-apply
      options:
        - none
        - refresh-only-apply
        - refresh-only-plan
      description: |
        Mode for drift detection of fetched plan.
        By default a `tofu apply -refresh-only` is executed to refresh the state which would make the
        fetched plan stale for a subsequent apply if it contains changes.
        The `refresh-only-plan` option would only detect the drift, but wouldn't apply it, but it
        would let this job fail on drift.
        When using `none` no drift detection is performed at all.

---

'$[[ inputs.as ]]':
  stage: $[[ inputs.stage ]]
  environment:
    name: $[[ inputs.state_name ]]
    action: prepare
  resource_group: $GITLAB_TOFU_STATE_NAME
  artifacts:
    # Terraform's cache files can include secrets which can be accidentally exposed.
    # Please exercise caution when utilizing secrets in your Terraform infrastructure and
    # consider limiting access to artifacts or take other security measures to protect sensitive information.
    # See https://docs.gitlab.com/ee/ci/yaml/#artifactsaccess for possible values.
    access: '$[[ inputs.artifacts_access ]]'
    paths:
      - $GITLAB_TOFU_ROOT_DIR/$[[ inputs.plan_name ]].cache
      - '$[[ inputs.extra_artifacts ]]'
  rules: $[[ inputs.rules ]]
  variables:
    GITLAB_TOFU_ROOT_DIR: $[[ inputs.root_dir ]]
    GITLAB_TOFU_STATE_NAME: $[[ inputs.state_name ]]
    GITLAB_TOFU_PLAN_NAME: $[[ inputs.plan_name ]]
    GITLAB_TOFU_VAR_FILE: '$[[ inputs.var_file ]]'
    GITLAB_TOFU_AUTO_ENCRYPTION: '$[[ inputs.auto_encryption ]]'
    GITLAB_TOFU_AUTO_ENCRYPTION_PASSPHRASE: '$[[ inputs.auto_encryption_passphrase ]]'
    GITLAB_TOFU_AUTO_ENCRYPTION_ENABLE_MIGRATION_FROM_UNENCRYPTED: '$[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]'
    GITLAB_TOFU_ALLOW_DEVELOPER_ROLE: '$[[ inputs.allow_developer_role ]]'
    GITLAB_TOFU_AUTO_DEFINE_BACKEND: '$[[ inputs.auto_define_backend ]]'
    GITLAB_TOFU_FETCH_MR_PLAN_DRIFT_DETECTION_MODE: '$[[ inputs.drift_detection_mode ]]'
  image:
    name: '$[[ inputs.image_registry_base ]]/$[[ inputs.image_name ]]:$[[ inputs.version ]]-opentofu$[[ inputs.opentofu_version ]]-$[[ inputs.base_os ]]$[[ inputs.image_digest ]]'
  script:
    - gitlab-tofu fetch-mr-plan
